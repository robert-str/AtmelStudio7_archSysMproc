
LCD2x16_via_IIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800124  00800124  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011f0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e8  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085b  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000037af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  9e:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <TWIsetup>:
//Shift cursor left by n
void LCDcursorLeft(uint8_t n){
	uint8_t i;
	for (i=0;i<n;i++)
		LCDsendCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_CURSOR | HD44780_SHIFT_LEFT);
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  b0:	08 95       	ret

000000b2 <TWIstart>:
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <TWIstart+0xa>
  c2:	08 95       	ret

000000c4 <TWIstop>:
  c4:	84 e9       	ldi	r24, 0x94	; 148
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ca:	ec eb       	ldi	r30, 0xBC	; 188
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	84 fd       	sbrc	r24, 4
  d2:	fd cf       	rjmp	.-6      	; 0xce <TWIstop+0xa>
  d4:	08 95       	ret

000000d6 <TWIwrite>:
  d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e0:	ec eb       	ldi	r30, 0xBC	; 188
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <TWIwrite+0xe>
  ea:	08 95       	ret

000000ec <setOutputs8574>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	0e 94 59 00 	call	0xb2	; 0xb2 <TWIstart>
  f4:	8e e7       	ldi	r24, 0x7E	; 126
  f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <TWIwrite>
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 6b 00 	call	0xd6	; 0xd6 <TWIwrite>
 100:	0e 94 62 00 	call	0xc4	; 0xc4 <TWIstop>
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <setOutputs8574+0x1a>
 10a:	00 00       	nop
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <sendHalfByteLCD>:
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
 118:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <BLval>
 11c:	30 e1       	ldi	r19, 0x10	; 16
 11e:	83 9f       	mul	r24, r19
 120:	e0 01       	movw	r28, r0
 122:	11 24       	eor	r1, r1
 124:	82 2f       	mov	r24, r18
 126:	89 2b       	or	r24, r25
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	8c 2b       	or	r24, r28
 12c:	0e 94 76 00 	call	0xec	; 0xec <setOutputs8574>
 130:	38 e0       	ldi	r19, 0x08	; 8
 132:	3a 95       	dec	r19
 134:	f1 f7       	brne	.-4      	; 0x132 <sendHalfByteLCD+0x22>
 136:	00 00       	nop
 138:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <BLval>
 140:	89 2b       	or	r24, r25
 142:	8c 2b       	or	r24, r28
 144:	0e 94 76 00 	call	0xec	; 0xec <setOutputs8574>
 148:	38 e0       	ldi	r19, 0x08	; 8
 14a:	3a 95       	dec	r19
 14c:	f1 f7       	brne	.-4      	; 0x14a <sendHalfByteLCD+0x3a>
 14e:	00 00       	nop
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCDsendChar>:
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 160:	8c 2f       	mov	r24, r28
 162:	82 95       	swap	r24
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
 16a:	8c 2f       	mov	r24, r28
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
 172:	81 e2       	ldi	r24, 0x21	; 33
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDsendChar+0x1e>
 178:	00 00       	nop
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <LCDstring>:
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	81 f0       	breq	.+32     	; 0x1aa <LCDstring+0x2c>
 18a:	66 23       	and	r22, r22
 18c:	71 f0       	breq	.+28     	; 0x1aa <LCDstring+0x2c>
 18e:	ec 01       	movw	r28, r24
 190:	61 50       	subi	r22, 0x01	; 1
 192:	06 2f       	mov	r16, r22
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	0f 5f       	subi	r16, 0xFF	; 255
 198:	1f 4f       	sbci	r17, 0xFF	; 255
 19a:	08 0f       	add	r16, r24
 19c:	19 1f       	adc	r17, r25
 19e:	89 91       	ld	r24, Y+
 1a0:	0e 94 ab 00 	call	0x156	; 0x156 <LCDsendChar>
 1a4:	c0 17       	cp	r28, r16
 1a6:	d1 07       	cpc	r29, r17
 1a8:	d1 f7       	brne	.-12     	; 0x19e <LCDstring+0x20>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <LCDsendCommand>:
 1b4:	cf 93       	push	r28
 1b6:	c8 2f       	mov	r28, r24
 1b8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 1bc:	82 95       	swap	r24
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
 1c4:	8c 2f       	mov	r24, r28
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
 1cc:	81 e2       	ldi	r24, 0x21	; 33
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCDsendCommand+0x1a>
 1d2:	00 00       	nop
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <LCDhome>:
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
 1de:	83 ec       	ldi	r24, 0xC3	; 195
 1e0:	99 e0       	ldi	r25, 0x09	; 9
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDhome+0xa>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCDhome+0x10>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <LCDGotoXY>:
 1ec:	90 e4       	ldi	r25, 0x40	; 64
 1ee:	69 9f       	mul	r22, r25
 1f0:	80 0d       	add	r24, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
 1fa:	08 95       	ret

000001fc <LCDshiftRight>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	88 23       	and	r24, r24
 202:	41 f0       	breq	.+16     	; 0x214 <LCDshiftRight+0x18>
 204:	d8 2f       	mov	r29, r24
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	8c e1       	ldi	r24, 0x1C	; 28
 20a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
 20e:	cf 5f       	subi	r28, 0xFF	; 255
 210:	dc 13       	cpse	r29, r28
 212:	fa cf       	rjmp	.-12     	; 0x208 <LCDshiftRight+0xc>
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <LCDshiftLeft>:
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	88 23       	and	r24, r24
 220:	41 f0       	breq	.+16     	; 0x232 <LCDshiftLeft+0x18>
 222:	d8 2f       	mov	r29, r24
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
 22c:	cf 5f       	subi	r28, 0xFF	; 255
 22e:	dc 13       	cpse	r29, r28
 230:	fa cf       	rjmp	.-12     	; 0x226 <LCDshiftLeft+0xc>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCDcursorRight>:
//Shift cursor right by n	                        
void LCDcursorRight(uint8_t n){
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
	uint8_t i;
	for (i=0;i<n;i++)
 23c:	88 23       	and	r24, r24
 23e:	41 f0       	breq	.+16     	; 0x250 <LCDcursorRight+0x18>
 240:	d8 2f       	mov	r29, r24
 242:	c0 e0       	ldi	r28, 0x00	; 0
		LCDsendCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_CURSOR | HD44780_SHIFT_RIGHT);
 244:	84 e1       	ldi	r24, 0x14	; 20
 246:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
		LCDsendCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_CURSOR | HD44780_SHIFT_LEFT);
}
//Shift cursor right by n	                        
void LCDcursorRight(uint8_t n){
	uint8_t i;
	for (i=0;i<n;i++)
 24a:	cf 5f       	subi	r28, 0xFF	; 255
 24c:	dc 13       	cpse	r29, r28
 24e:	fa cf       	rjmp	.-12     	; 0x244 <LCDcursorRight+0xc>
		LCDsendCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_CURSOR | HD44780_SHIFT_RIGHT);
}	
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCDinit>:
//Initializes LCD
void LCDinit(void)			                            
{
	unsigned char itr=0;
	
	TWIsetup();
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <TWIsetup>
	
	RSval = RS_COMMAND;
 25a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
	for(itr=0;itr<3;itr++){
		sendHalfByteLCD(0x03);
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8b ed       	ldi	r24, 0xDB	; 219
 266:	95 e0       	ldi	r25, 0x05	; 5
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCDinit+0x12>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDinit+0x18>
 26e:	00 00       	nop
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
 276:	8b ed       	ldi	r24, 0xDB	; 219
 278:	95 e0       	ldi	r25, 0x05	; 5
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCDinit+0x24>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCDinit+0x2a>
 280:	00 00       	nop
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
 288:	8b ed       	ldi	r24, 0xDB	; 219
 28a:	95 e0       	ldi	r25, 0x05	; 5
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCDinit+0x36>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCDinit+0x3c>
 292:	00 00       	nop
		_delay_ms(6);
	}
	sendHalfByteLCD(0x02);
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 88 00 	call	0x110	; 0x110 <sendHalfByteLCD>
 29a:	89 ef       	ldi	r24, 0xF9	; 249
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCDinit+0x48>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCDinit+0x4e>
 2a4:	00 00       	nop
	_delay_ms(1);
	LCDsendCommand(HD44780_FUNCTION_SET | HD44780_FONT5x10 | HD44780_TWO_LINE | HD44780_4_BIT); // 5x10 font, two line, 4bit interface
 2a6:	8c e2       	ldi	r24, 0x2C	; 44
 2a8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
	LCDsendCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // turn off display
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
	LCDsendCommand(HD44780_CLEAR); // clear DDRAM
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
 2b8:	9f e9       	ldi	r25, 0x9F	; 159
 2ba:	26 e8       	ldi	r18, 0x86	; 134
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	91 50       	subi	r25, 0x01	; 1
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <LCDinit+0x68>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDinit+0x72>
 2c8:	00 00       	nop
	_delay_ms(500);
	LCDsendCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrement addres, move coursore mode
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
	LCDsendCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // turn on LCD, cursor on, blink on
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCDsendCommand>
 2d6:	08 95       	ret

000002d8 <main>:
#include <avr/interrupt.h>

#include "LCD_HD44780_IIC.h"

int main(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	64 97       	sbiw	r28, 0x14	; 20
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
	char data[20] = "napis testowy"; 
 2ec:	8e e0       	ldi	r24, 0x0E	; 14
 2ee:	e1 e0       	ldi	r30, 0x01	; 1
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	de 01       	movw	r26, r28
 2f4:	11 96       	adiw	r26, 0x01	; 1
 2f6:	01 90       	ld	r0, Z+
 2f8:	0d 92       	st	X+, r0
 2fa:	8a 95       	dec	r24
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x1e>
 2fe:	fe 01       	movw	r30, r28
 300:	3f 96       	adiw	r30, 0x0f	; 15
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	df 01       	movw	r26, r30
 306:	1d 92       	st	X+, r1
 308:	8a 95       	dec	r24
 30a:	e9 f7       	brne	.-6      	; 0x306 <main+0x2e>
	unsigned char i = 0x30;
	
	DDRD |= 0x40;
 30c:	56 9a       	sbi	0x0a, 6	; 10
	PORTD |= 0x40;
 30e:	5e 9a       	sbi	0x0b, 6	; 11
 310:	bf ef       	ldi	r27, 0xFF	; 255
 312:	20 e7       	ldi	r18, 0x70	; 112
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	b1 50       	subi	r27, 0x01	; 1
 318:	20 40       	sbci	r18, 0x00	; 0
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x3e>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x48>
 320:	00 00       	nop
	
	_delay_ms(50);
	PORTD &= ~0x40;
 322:	5e 98       	cbi	0x0b, 6	; 11
	LCDinit();
 324:	0e 94 2b 01 	call	0x256	; 0x256 <LCDinit>
	LCDhome();
 328:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDhome>
	
	LCDstring(data, 13);
 32c:	6d e0       	ldi	r22, 0x0D	; 13
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 bf 00 	call	0x17e	; 0x17e <LCDstring>
	
	LCDGotoXY(6,1);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCDGotoXY>
	LCDstring("Ala ma kota", 11);
 33e:	6b e0       	ldi	r22, 0x0B	; 11
 340:	85 e1       	ldi	r24, 0x15	; 21
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 bf 00 	call	0x17e	; 0x17e <LCDstring>
	LCDGotoXY(0,1);
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCDGotoXY>
	LCDshiftRight(2);
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDshiftRight>
	LCDstring("xD", 2);
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	81 e2       	ldi	r24, 0x21	; 33
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 bf 00 	call	0x17e	; 0x17e <LCDstring>
	LCDcursorRight(3);
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 1c 01 	call	0x238	; 0x238 <LCDcursorRight>
	LCDstring("xD", 2);
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	81 e2       	ldi	r24, 0x21	; 33
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 bf 00 	call	0x17e	; 0x17e <LCDstring>
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	a7 ea       	ldi	r26, 0xA7	; 167
 374:	b1 e6       	ldi	r27, 0x61	; 97
 376:	91 50       	subi	r25, 0x01	; 1
 378:	a0 40       	sbci	r26, 0x00	; 0
 37a:	b0 40       	sbci	r27, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x9e>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0xa8>
 380:	00 00       	nop
	_delay_ms(2000);
	LCDshiftRight(4);
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDshiftRight>
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	87 ea       	ldi	r24, 0xA7	; 167
 38c:	91 e6       	ldi	r25, 0x61	; 97
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0xb6>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0xc0>
 398:	00 00       	nop
	_delay_ms(2000);
	LCDshiftLeft(1);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 0d 01 	call	0x21a	; 0x21a <LCDshiftLeft>
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <main+0xc8>

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
