
Uno_zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000871  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000754  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  00001305  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018b  00000000  00000000  00001b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  9e:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
}
	
void USART0_send(char data){
	while ( !(UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__vector_2>:
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d8:	88 23       	and	r24, r24
  da:	21 f0       	breq	.+8      	; 0xe4 <__vector_2+0x1e>
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	89 27       	eor	r24, r25
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <USART_Init>:
  f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  fc:	e0 ec       	ldi	r30, 0xC0	; 192
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	88 e9       	ldi	r24, 0x98	; 152
 108:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 112:	08 95       	ret

00000114 <USART0_sendString>:
}

void USART0_sendString(char* data){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	unsigned char i=0;
	
	while(data[i] != 0){
 11a:	38 81       	ld	r19, Y
 11c:	33 23       	and	r19, r19
 11e:	99 f0       	breq	.+38     	; 0x146 <USART0_sendString+0x32>
 120:	20 e0       	ldi	r18, 0x00	; 0
		while ( !(UCSR0A & (1<<UDRE0)) );
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
 126:	46 ec       	ldi	r20, 0xC6	; 198
 128:	50 e0       	ldi	r21, 0x00	; 0

void USART0_sendString(char* data){
	unsigned char i=0;
	
	while(data[i] != 0){
		while ( !(UCSR0A & (1<<UDRE0)) );
 12a:	90 81       	ld	r25, Z
 12c:	95 ff       	sbrs	r25, 5
 12e:	fd cf       	rjmp	.-6      	; 0x12a <USART0_sendString+0x16>
		UDR0 = data[i];
 130:	da 01       	movw	r26, r20
 132:	3c 93       	st	X, r19
		if(i==255)
 134:	2f 3f       	cpi	r18, 0xFF	; 255
 136:	39 f0       	breq	.+14     	; 0x146 <USART0_sendString+0x32>
			break;
		i++;
 138:	2f 5f       	subi	r18, 0xFF	; 255
}

void USART0_sendString(char* data){
	unsigned char i=0;
	
	while(data[i] != 0){
 13a:	de 01       	movw	r26, r28
 13c:	a2 0f       	add	r26, r18
 13e:	b1 1d       	adc	r27, r1
 140:	3c 91       	ld	r19, X
 142:	31 11       	cpse	r19, r1
 144:	f2 cf       	rjmp	.-28     	; 0x12a <USART0_sendString+0x16>
		UDR0 = data[i];
		if(i==255)
			break;
		i++;
	}
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <main>:
int main(void)
{
	//unsigned char val=0, en=1;
	unsigned char val2=0, lastvalue = 0;//, cmd=0;
	unsigned int cnt = 0;
	DDRB |= 0x2F;
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	8f 62       	ori	r24, 0x2F	; 47
 150:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x21;
 152:	85 b1       	in	r24, 0x05	; 5
 154:	81 62       	ori	r24, 0x21	; 33
 156:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0;
 158:	1a b8       	out	0x0a, r1	; 10
    
	sei();
 15a:	78 94       	sei
	EICRA |= (1<<ISC10 | 1<<ISC11);
 15c:	e9 e6       	ldi	r30, 0x69	; 105
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8c 60       	ori	r24, 0x0C	; 12
 164:	80 83       	st	Z, r24
	EIMSK |= 0x02;
 166:	e9 9a       	sbi	0x1d, 1	; 29
	
	USART_Init();
 168:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Init>
}

int main(void)
{
	//unsigned char val=0, en=1;
	unsigned char val2=0, lastvalue = 0;//, cmd=0;
 16c:	90 e0       	ldi	r25, 0x00	; 0
	
	/* Replace with your application code */
    while (1) 
    {
		_delay_ms(1);
		PORTB ^= 0x20;
 16e:	c0 e2       	ldi	r28, 0x20	; 32
		
		if(cmd != 0){
			switch (cmd)
			{
			case 'b':
				PORTB ^= 0x04;
 170:	04 e0       	ldi	r16, 0x04	; 4
		
		if((PIND & 0x10) != 0x10)
		{
			if(val2 == 0){
				USART0_sendString("Green pressed\r");
				en = !en;
 172:	d1 e0       	ldi	r29, 0x01	; 1
				PORTB ^= 0x02;
 174:	12 e0       	ldi	r17, 0x02	; 2
 176:	03 c0       	rjmp	.+6      	; 0x17e <main+0x32>
			}
			val2 = 1;
		}else val2 = 0;
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	01 c0       	rjmp	.+2      	; 0x17e <main+0x32>
			if(val2 == 0){
				USART0_sendString("Green pressed\r");
				en = !en;
				PORTB ^= 0x02;
			}
			val2 = 1;
 17c:	9d 2f       	mov	r25, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	ef e9       	ldi	r30, 0x9F	; 159
 180:	ff e0       	ldi	r31, 0x0F	; 15
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x36>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x3c>
 188:	00 00       	nop
	
	/* Replace with your application code */
    while (1) 
    {
		_delay_ms(1);
		PORTB ^= 0x20;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8c 27       	eor	r24, r28
 18e:	85 b9       	out	0x05, r24	; 5
 190:	ef e3       	ldi	r30, 0x3F	; 63
 192:	fc e9       	ldi	r31, 0x9C	; 156
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x48>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x4e>
 19a:	00 00       	nop
	//	if(UCSR0A & (1<<RXC0)){
		//	cmd = UDR0;
		//	PORTB ^= 0x04;
	//	}
		
		if(cmd != 0){
 19c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1a0:	88 23       	and	r24, r24
 1a2:	49 f0       	breq	.+18     	; 0x1b6 <main+0x6a>
			switch (cmd)
 1a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1a8:	82 36       	cpi	r24, 0x62	; 98
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <main+0x66>
			{
			case 'b':
				PORTB ^= 0x04;
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	80 27       	eor	r24, r16
 1b0:	85 b9       	out	0x05, r24	; 5
				break;
			default:
				break;
			}
			cmd=0;
 1b2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		}
		
		if((PIND & 0x10) != 0x10)
 1b6:	4c 99       	sbic	0x09, 4	; 9
 1b8:	df cf       	rjmp	.-66     	; 0x178 <main+0x2c>
		{
			if(val2 == 0){
 1ba:	91 11       	cpse	r25, r1
 1bc:	df cf       	rjmp	.-66     	; 0x17c <main+0x30>
				USART0_sendString("Green pressed\r");
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 8a 00 	call	0x114	; 0x114 <USART0_sendString>
				en = !en;
 1c6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 1ca:	8d 2f       	mov	r24, r29
 1cc:	91 11       	cpse	r25, r1
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				PORTB ^= 0x02;
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	81 27       	eor	r24, r17
 1d8:	85 b9       	out	0x05, r24	; 5
			}
			val2 = 1;
 1da:	9d 2f       	mov	r25, r29
 1dc:	d0 cf       	rjmp	.-96     	; 0x17e <main+0x32>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
